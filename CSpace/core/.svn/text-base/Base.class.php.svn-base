<?php

//This class contains the basic data that are inserted into the DB in most queries. 
class Base {
	protected $userName;	
	protected $userID;
	protected $projectID;
	protected $stageID;
	protected $questionID;
	protected $question;
	protected $studyID;
	protected $condition;
	protected $previousStageStartTimestamp;
	protected $taskStartTimestamp;
	protected $questionStartTimestamp;
	protected $page;
	protected $maxTime;
	protected $previousMaxTime;
	protected $timestamp;
	protected $date;
	protected $time;
	protected $ip;
	protected $localTimestamp = null;
	protected $localDate = null;
	protected $localTime = null;
	protected $maxTimeQuestion;
	protected $maxLoops;
	protected $currentLoops;
	protected $allowBrowsing;
	private static $instance;
		
	public function __construct() {
		date_default_timezone_set('America/New_York');
		$this->userName = $_SESSION['CSpace_userName'];
		$this->userID = $_SESSION['CSpace_userID'];
		$this->projectID = $_SESSION['CSpace_projectID'];
		$this->stageID = $_SESSION['CSpace_stageID'];
		$this->questionID = $_SESSION['CSpace_questionID'];
		$this->question = $_SESSION['CSpace_question'];
		$this->studyID = $_SESSION['CSpace_studyID'];
		$this->condition = $_SESSION['CSpace_condition'];
		$this->previousStageStartTimestamp = $_SESSION['CSpace_previousStageStartTimestamp'];
		$this->taskStartTimestamp = $_SESSION['CSpace_taskStartTimestamp'];
		$this->questionStartTimestamp = $_SESSION['CSpace_questionStartTimestamp'];	
		$this->page = $_SESSION['CSpace_page'];
		$this->maxTime = $_SESSION['CSpace_maxTime'];
		$this->previousMaxTime = $_SESSION['CSpace_previousMaxTime'];
		$this->maxTimeQuestion = $_SESSION['CSpace_maxTimeQuestion'];
		$this->maxLoops = $_SESSION['CSpace_maxLoops'];	
		$this->currentLoops = $_SESSION['CSpace_currentLoops'];
		$this->allowBrowsing = $_SESSION['CSpace_allowBrowsing'];	
		$this->timestamp = time();
		$datetime = getdate();
		$this->date = date('Y-m-d', $datetime[0]);
		$this->time = date('H:i:s', $datetime[0]);
		$this->ip = $_SERVER['REMOTE_ADDR'];
	}
	 
	public function __destructor() {
  
	}
	
	public static function getInstance()
    {
        if (!isset(self::$instance)) {
            $className = __CLASS__;
            self::$instance = new $className;
        }
        return self::$instance;
    }
  
	//GETTERS
    public function isUserActive()
	{
		return isset($_SESSION['CSpace_userID']);
	}

	public function getUserName()
	{
		return $this->userName;
	}
	
	public function getUserID()
	{
		return $this->userID;
	}
	
	public function getProjectID()
	{
		return $this->projectID;
	}
	
	public function getStageID()
	{
		return $this->stageID;
	}
	
	public function getPage()
	{
		return $this->page;
	}
  
	public function getTimestamp()
	{
		return $this->timestamp;
	}
  
	public function getDate()
	{
		return $this->date;
	}
  
	public function getTime()
	{
		return $this->time;
	}
  
	public function getLocalTimestamp()
	{
		return $this->localTimestamp;
	}
  
	public function getLocalDate()
	{
		return $this->localDate;
	}
  
	public function getLocalTime()
	{
		return $this->localTime;
	}
	
	public function getIP()
	{
		return $this->ip;
	}
	
	public function getQuestionID()
	{
		return $this->questionID;
	}
	
	public function getQuestion()
	{
		return $this->question;
	}
	
	public function getStudyID()
	{
		return $this->studyID;
	}

	public function getCondition()
	{
		return $this->condition;
	}
	
	public function getTaskStartTimestamp()
	{
		return $this->taskStartTimestamp;
	}
	
	public function getPreviousStageStartTimestamp()
	{
		return $this->previousStageStartTimestamp;
	}
	
	public function getQuestionStartTimestamp()
	{
		return $this->questionStartTimestamp;
	}
	
	public function getMaxTime()
	{
		return $this->maxTime;
	}
	
	public function getPreviousMaxTime()
	{
		return $this->previousMaxTime;
	}

	public function getMaxTimeQuestion()
	{
		return $this->maxTimeQuestion;
	}
	
	public function getMaxLoops()
	{
		return $this->maxLoops;
	}
	
	public function getCurrentLoops()
	{
		return $this->currentLoops;
	}
		
	public function getAllowBrowsing()
	{
		return $this->allowBrowsing;
	}	

	public function getXML() {
		
		$xml = new XmlWriter();
		$xml->openMemory();
		$xml->startDocument('1.0');
		$xml->setIndent(true);
		
		$this->getObject2XML($xml, $this);
 		$xml->endElement();
 	
 		return $xml->outputMemory(true);
	}
	
	private function getObject2XML(XMLWriter &$xml, $data) {
		foreach($data as $key => $value) {
										
			if(is_object($value)) {
				$xml->startElement($key);
				$this->getObject2XML($xml, $value);
				$xml->endElement();
				continue;
			}
			else if(is_array($value)) {
				$this->getArray2XML($xml, $key, $value);
			}
 
			if (is_string($value)) {
				$xml->writeElement($key, $value);		
			}
		}
	}
 
	private function getArray2XML(XMLWriter $xml, $keyParent, $data) {
		foreach($data as $key => $value) {
			if (is_string($value)) {
				$xml->writeElement($keyParent, $value);
				continue;
			}
 
			if (is_numeric($key)) {
				$xml->startElement($keyParent);
			}
 
			if(is_object($value)) {
				$this->getObject2XML($xml, $value);
			}
			else if(is_array($value)) {
				$this->getArray2XML($xml, $key, $value);
				continue;
			}
 
			if (is_numeric($key)) {
				$xml->endElement();
			}
		}
	}
		
	//SETTERS
	public function setUserName($userName)
	{
		 $this->userName = $userName;
		 $_SESSION['CSpace_userName'] = $userName;

	}
	
	public function setUserID($userID)
	{
		 $this->userID = $userID;
		 $_SESSION['CSpace_userID'] = $userID;

	}
	
	public function setProjectID($projectID)
	{
		$this->projectID = $projectID;
		$_SESSION['CSpace_projectID'] = $projectID;		
	}
	
	public function setStageID($stageID)
	{
		 $this->stageID = $stageID;
		 $_SESSION['CSpace_stageID'] = $stageID;
	}
	
	public function setQuestionID($questionID)
	{
		 $this->questionID = $questionID;
		 $_SESSION['CSpace_questionID'] = $questionID;
	}
	
	public function setQuestion($question)
	{
		 $this->question = $question;
		 $_SESSION['CSpace_question'] = $question;
	}
	
	public function setStudyID($studyID)
	{
		 $this->studyID = $studyID;
		 $_SESSION['CSpace_studyID'] = $studyID;
	}
	
	public function setCondition($condition)
	{
		 $this->condition = $condition;
		 $_SESSION['CSpace_condition'] = $condition;
	}

	public function setPage($page)
	{
		 $this->page = $page;
		 $_SESSION['CSpace_page'] = $page;
	}
	
	public function setPreviousStartTimestamp($previousStartTimestamp)
	{
		 $this->previousStageStartTimestamp = $previousStartTimestamp;
		 $_SESSION['CSpace_previousStageStartTimestamp'] = $previousStartTimestamp;
	}
	
	public function setPreviousMaxTime($previousMaxTime)
	{
		 $this->previousMaxTime = $previousMaxTime;
		 $_SESSION['CSpace_previousMaxTime'] = $previousMaxTime;
	}
	
	public function setTaskStartTimestamp($taskStartTimestamp)
	{
		 $this->taskStartTimestamp = $taskStartTimestamp;
		 $_SESSION['CSpace_taskStartTimestamp'] = $taskStartTimestamp;
	}
	
	public function setQuestionStartTimestamp($questionStartTimestamp)
	{
		 $this->questionStartTimestamp = $questionStartTimestamp;
		 $_SESSION['CSpace_questionStartTimestamp'] = $questionStartTimestamp;
	}
	
	public function setTimestamp($timestamp)
	{
		$this->timestamp = $timestamp;
	}
  
	public function setDate($date)
	{
		$this->date = $date;
	}
  
	public function setTime($time)
	{
		$this->time = $time;
	}
  
	public function setLocalTimestamp($localTimestamp)
	{
		$this->localTimestamp = $localTimestamp;
	}
  
	public function setLocalDate($localDate)
	{
		$this->localDate = $localDate;
	}
  
	public function setLocalTime($localTime)
	{
		$this->localTime = $localTime;
	}
	
	public function setIP($ip)
	{
		$this->ip = $ip;
	}
	
	public function setMaxTime($maxTime)
	{
		 $this->maxTime = $maxTime;
		 $_SESSION['CSpace_maxTime'] = $maxTime;
	}
	
	public function setMaxTimeQuestion($maxTimeQuestion)
	{
		 $this->maxTimeQuestion = $maxTimeQuestion;
		 $_SESSION['CSpace_maxTimeQuestion'] = $maxTimeQuestion;
	}
	
	public function setMaxLoops($maxLoops)
	{
		 $this->maxLoops = $maxLoops;
		 $_SESSION['CSpace_maxLoops'] = $maxLoops;
	}

	public function setCurrentLoops($currentLoops)
	{
		 $this->currentLoops = $currentLoops;
		 $_SESSION['CSpace_currentLoops'] = $currentLoops;
	}
	
	public function setAllowBrowsing($allowBrowsing)
	{
		 $this->allowBrowsing = $allowBrowsing;
		 $_SESSION['CSpace_allowBrowsing'] = $allowBrowsing;
	}
			
	public function isSessionActive()
	{
		return isset($_SESSION['CSpace_userID']);	
	}
	
	public function isTaskActive()
	{
		return isset($_SESSION['CSpace_taskStartTimestamp']);	
	}
	
	public function isValidLoop()
	{
		/*echo "Current Loops: ".$this->currentLoops;
		echo "<br />";		
		echo "Max Loop: ".$this->maxLoops;
		echo "<br />";*/		
		return ($this->currentLoops<$this->maxLoops);	
	}
		
	public function isQuestionInTime() //UPPER LIMIT IN SECONDS e.g. 1800 for 30 mins
	{
		$t2 = $this->getTimestamp(); //Current time
		$t1 = $this->getQuestionStartTimestamp(); //Starting time
		$elapsedTime = (int)$t2-(int)$t1;
		$limit = $this->getMaxTimeQuestion();
		/*echo "<br /> Question";		
		echo "<br /> t1: $t1";		
		echo "<br /> t2: $t2";
		echo "<br /> el: $elapsedTime";
		echo "<br /> li: $limit";
		echo "<br />";			
		//return ((int)$elapsedTime<(int)$limit);*/
		return ($this->getQuestionRemainingTime()>0);
		
	}

	public function getQuestionRemainingTime()
	{
		$t2 = $this->getTimestamp(); //Current time
		$t1 = $this->getQuestionStartTimestamp(); //Starting time
		$elapsedTime = (int)$t2-(int)$t1;
		$limit = $this->getMaxTimeQuestion();
		return ($limit-$elapsedTime);			
	}
	
	public function isTaskInTime() //UPPER LIMIT IN SECONDS e.g. 1800 for 30 mins
	{
		$t2 = $this->getTimestamp(); //Current time
		$t1 = $this->getTaskStartTimestamp(); //Starting time
		$elapsedTime = (int)$t2-(int)$t1;
		$limit = $this->getMaxTime();
		/*echo "<br /> Task";		
		echo "<br /> t1: $t1";		
		echo "<br /> t2: $t2";
		echo "<br /> el: $elapsedTime";
		echo "<br /> li: $limit";
		echo "<br />";		
		//return ((int)$elapsedTime<(int)$limit);*/
		return ($this->getTaskRemainingTime()>0);
	}
	
	public function getTaskRemainingTime()
	{
		$t2 = $this->getTimestamp(); //Current time
		$t1 = $this->getTaskStartTimestamp(); //Starting time
		$elapsedTime = (int)$t2-(int)$t1;
		$limit = $this->getMaxTime();
		return ($limit-$elapsedTime);			
	}
	
	public function isPreviousStageInTime() //UPPER LIMIT IN SECONDS e.g. 1800 for 30 mins
	{
		$t2 = $this->getTimestamp(); //Current time
		$t1 = $this->getPreviousStageStartTimestamp(); //Starting time
		$elapsedTime = (int)$t2-(int)$t1;
		$limit = $this->getPreviousMaxTime();
		/*echo "<br /> t1: $t1";
		echo "<br /> t2: $t2";
		echo "<br /> el: $elapsedTime";
		echo "<br /> li: $limit";
		echo "<br />";*/
		return ((int)$elapsedTime<(int)$limit);
	}
}
?>
